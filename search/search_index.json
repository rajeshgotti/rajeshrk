{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"angular/binding/","title":"Binding","text":""},{"location":"angular/binding/#propertybinding-ante-ts-file-vuna-data-ni-html-lo-cupinchadam","title":"PropertyBinding ante ts file vuna data ni Html lo cupinchadam","text":""},{"location":"angular/binding/#syntax-property","title":"syntax: [Property]","text":"<pre><code>      ==&gt; [disabled] ==&gt; [hidden]\n</code></pre>"},{"location":"angular/binding/#note-true-ante-kanipinchadu-false-ante-kanipistundi","title":"Note: True ante kanipinchadu, False ante kanipistundi","text":"ts.file<pre><code> isDisabled:boolean=true\n isHidden:boolean=false\n</code></pre> html<pre><code>&lt;button [disabled]=\"isDisable\"&gt;Disable&lt;/button&gt;\n    //button disable avtunndi bz of disable True,false iste kanipistundi\n&lt;input type=\"text\" [hidden]=\"isHidden\"&gt;\n    //false icham kabati filed kanipistundi True iste Hide avtundni\n</code></pre>"},{"location":"angular/binding/#ex2","title":"ex:2","text":"<p>ts.file<pre><code>  path:string=\"../img/img/png\" ; //stringType\n</code></pre> html<pre><code> &lt;img src={{path}} alt=\"\"/&gt;  (or) \n &lt;img [src]=path alt=\"\"/&gt; \n  Note: string type vunte html lo manam both propetyBinding or StringInterpolation edaina use cheskovachu\n  mainly propetyBinding andedi Boolean type kosam use chestam\n</code></pre>  ## RealTime example: html.file<pre><code> &lt;mat-card-actions class=\"buttonsStyle\"&gt;\n     &lt;button mat-stroked-button color=\"primary\" (click)=\"continueClick(item)\"\n       [disabled]=\"item?.medicationStatus?.toLowerCase() === 'current'\"&gt;Continue&lt;/button&gt;\n         &lt;button mat-stroked-button color=\"warn\" (click)=\"discontinueClick(item)\"\n           [disabled]=\"item?.medicationStatus?.toLowerCase() === 'discontinued'\"&gt;Discontinue&lt;/button&gt;\n          &lt;button mat-stroked-button color=\"accent\" (click)=\"modifyClick(item)\"&gt;Modify&lt;/button&gt;\n  &lt;/mat-card-actions&gt;\n</code></pre></p>"},{"location":"angular/binding/#realtime-example-2","title":"Realtime Example 2","text":"html<pre><code>// here medstatus='current' vunte continue btn ravali else dis-continue btn\n\n  &lt;button mat-raised-button color=\"primary\" *ngIf=\"item.medicationStatus\" class=\"mr-2\"\n     [ngClass]=\"item.medicationStatus === 'Current' ? \n     'continue-button' : item.medicationStatus === 'Discontinued' ? 'discontinue-button' : ''\"&gt;\n      {{ item.medicationStatus }}\n   &lt;/button&gt;\n    ---STYLE.SCSS--           \n .continue-button {\n    background-color: #c8e6c9 !important;\n    color: #256029 !important;          \n  }\n\n  .discontinue-button {\n    background-color: #ffcdd2 !important; \n    color: #b71c1c !important;           \n  }\n  .success-button {\n    border-color: #4caf50 !important; \n    color: #4caf50 !important;\n  }\n</code></pre> <pre><code> //here medStatus='current' (or) medstatus='ordered' vuna gani 'continue-button' ravali else discontinue\n    &lt;button mat-stroked-button class=\"mr-2\"\n      [ngClass]=\" (item.medicationStatus === 'Current' || item.medicationStatus === 'Ordered') \n        ? 'continue-button':item.medicationStatus === 'Discontinued' ? 'discontinue-button': ''\"&gt;\n           {{ item?.medicationStatus }}\n    &lt;/button&gt;\n</code></pre>"},{"location":"angular/binding/#classbinding","title":"ClassBinding","text":"<p>ts file<pre><code>  isAcive:boolean=false;  //variable:type=value\n</code></pre> html<pre><code>&lt;h1 [class]=\"isAcive? 'redColor' : 'blueColor'\"&gt; isAcive&lt;/h1&gt;\nNote: condition true aite redColor false aite blueColor\n\n      ----scss file---\n.redColor{\n    background-color: red;\n}\n.blueColor{\n    background-color: blueviolet;\n}\n</code></pre></p>"},{"location":"angular/binding/#ex2-to-apply-multiple-styles-we-use-ngclass","title":"ex:2 TO apply multiple styles we use [ngClass]","text":"<p>ts.file<pre><code>import { NgClass } from '@angular/common'; //import ngClass\n\n   public required = true;\n\n  public get Group() {\n    return {\n      TextColor: this.required,\n      TextSize: this.required,\n      TextStyle: this.required\n    };\n  }\n</code></pre> html.file<pre><code> &lt;!-- Multi-class binding --&gt;\n&lt;h2 [ngClass]=\"Group\"&gt;MultiStyles&lt;/h2&gt;\n\n   --- css ---\n.TextColor {\n  color: green;\n}\n\n.TextSize {\n  font-size: 60px;\n}\n\n.TextStyle {\n  font-style: italic;\n}\n</code></pre></p>"},{"location":"angular/binding/#-style-binding-","title":"-----Style binding-----","text":"<pre><code>    2ways ga use ceyachu\ni) Inline styleBinding anedi dynamic CSS apply ceyadaniku use avtundi\n   syntax: 1.[style.property]=variable\n           2.[style]={property:variable}  (or)\n\nii) General ga manam-Inline style ni yela use chestam ante \n    &lt;h1 style=\"color:red\"&gt;Static InlineStyle&lt;/h1&gt;\n\n dynamic css apply cheyali ante tsFile lo variable declare cheskoni chestam\n\n--- ts.File ----\n cvar:string:'red'\n--- html ----\n &lt;h1 [style.color]=\"cvar\"&gt;DynamicColor&lt;/h1&gt; //style.color=variableName \n</code></pre>"},{"location":"angular/binding/#apply-multiplestyle-using-style","title":"Apply multipleStyle using style","text":"<p>ts.file<pre><code> myStyle:object={\n color:'whit',\n background-color:'blue',\n border:'5px solid pink\n }\n\n --- html ---\n &lt;h1 [style]=\"myStyle\"&gt; multipleStyle&lt;/h1&gt; //[style]=propertyName\n</code></pre>  ## multiple styles using [ngStyle]</p> ts.file<pre><code> object type lo group ga raskovachu\n public myStyle={  \n   color:'green',\n   fontStyle:'italic',\n   fontSize:'50px'\n }; //this is in objectType\n\n ---html.file---\n &lt;h2 [ngStyle]=\"required?'green':'red'&gt; RAJESH &lt;/h2&gt;\n</code></pre>"},{"location":"angular/cellrender/","title":"CellRender","text":"ts.file<pre><code>        {\n            headerName: 'Copy To IP',\n            field: 'CopyToIP',\n            cellRenderer: () =&gt; {\n            const icon = document.createElement('i');\n            icon.className = 'fa fa-copy';\n            icon.style.cursor = 'pointer';\n            icon.style.color = 'black';\n            return icon;\n            },\n          onCellClicked: (params) =&gt; {\n            this.addMedicationsFrom(); //method\n          }\n        }\n        ----------\n  addMedicationsFrom(medicationObj = null, isPatchCurrentStartDate: boolean = false){\n      const matDialog = this.dialog.open(MedicationEntryPopupComponent,{\n        width:'80%',\n        height:'80%',\n        data: {\n          // type: 'from pharmacist',\n          medicationRowId: 0 ,\n          actionType: 'Add',\n          medicationType: 'Current',\n          isShowMedicationTypeField: false,\n          isClosed: true,\n          medicationObj: medicationObj,\n          isPatchCurrentStartDate: isPatchCurrentStartDate\n        },\n        disableClose: true\n      })\n\n      matDialog.componentInstance.getSavedMedications.subscribe((res) =&gt; {\n       console.log(res)\n\n      }, (error) =&gt; {\n      });\n    }   \n</code></pre>"},{"location":"angular/cellrender/#onclick","title":"onClick()","text":"ts.file<pre><code>    {\n        field: 'edit', headerName: 'Actions', headerTooltip: 'Edit', minWidth: 120,width:100,\n          pinned:'right', filter: false,\n        cellRenderer: params =&gt; {\n          if (params.data) {\n          const iconsHTML = \n                 &lt;span class=\"d-flex\" title=\"Edit\"&gt;\n                    &lt;i class=\"fas fa-pen\"&gt;&lt;/i&gt;\n                 &lt;/span&gt;\n                 &lt;span class=\"d-flex\" title=\"Delete\"&gt;\n                    &lt;i class=\"far fa-trash-alt fa-icon-del-col\"&gt;&lt;/i&gt;\n                 &lt;/span&gt; ;\n            const htmlContent = &lt;div class=\"f-icon-div\"&gt;\n                                  ${iconsHTML}\n                                &lt;/div&gt;;\n              return htmlContent;\n          }\n          return null;\n      },\n\n      onCellClicked: (params) =&gt; {\n         // console.log(params)\n        const clicked = params.event.target ;\n         var element = clicked as HTMLElement;\n         var className = element.className.toString();\n           if (className==='fas fa-pen') {\n             this.addNewNursingStation(params.data)\n             }else if(className==='far fa-trash-alt fa-icon-del-col') {\n              this.deleteNursingtation(params.data)\n           }\n         }\n       }\n</code></pre>"},{"location":"angular/clickEvent/","title":"ClickEvent","text":"<pre><code> 01: ngModelChange()  ==&gt; (ngModelChange)=\"onChange($event)\"\n 02: mat-autoComplete ==&gt; (optionSelected)=\"selectedData($event)\"\n 03: mat-select       ==&gt; (selectionChange)=\"demo()\"\n 04: ng-Select        ==&gt; (change)=\"demo()\"\n 05: date change      ==&gt; (dateChange)=\"onFromDateToDateChange($event)\n 06: input\n 07: focus()\n 08: blur()\n 09: keyup()\n 10: keydown()\n 11: keypress()\n</code></pre>"},{"location":"angular/clickEvent/#01-ngmodelchange","title":"01: ngModelChange()","text":"html.file<pre><code> &lt;input matInput formControlName=\"fm\" (ngModelChange)=\"onChange($event)\"&gt;\n\n    ---ts.file--\n onChange(e):void{\n    ---\n    ---\n }\n</code></pre>"},{"location":"angular/clickEvent/#realtime-ex-ngmodelchangeonchangeevent","title":"RealTime Ex:   ngModelChange=\"onChange(event)\"","text":"<p><pre><code>## Syntax : &lt;input [(ngModel)]=\"yourVariable\" (ngModelChange)=\"onChange($event)\" /&gt;\n</code></pre> html.file<pre><code> Ex:1\n  &lt;input [(ngModel)]=\"username\" (ngModelChange)=\"onUsernameChange($event)\" placeholder=\"Enter username\" /&gt;\n            &lt;p&gt;You typed: {{ username }}&lt;/p&gt;\n</code></pre> ts.file<pre><code> export class AppComponent {\n  username = '';\n\n  onUsernameChange(value: string) {\n    console.log('Username changed to:', value);\n    // You can do anything here, like validation, API call, etc.\n  }}\n</code></pre></p>"},{"location":"angular/clickEvent/#realtime-ex2","title":"RealTime Ex:2","text":"<p>html.file<pre><code>&lt;mat-form-field class=\"example-full-width\" appearance=\"outline\"&gt;\n    &lt;mat-label&gt;Edu Date&lt;/mat-label&gt;\n       &lt;input matInput  matTooltip=\"MM/dd/yyyy\" appMaskDate [type]=\"'datetime'\"\n          [max]=\"ToDayDate\" [owlDateTime]=\"time1\" formControlName=\"edudate\" \n          (ngModelChange)=\"onChange($event,'S')\" placeholder=\"Edu Date\"&gt;\n       &lt;mat-icon matSuffix [owlDateTimeTrigger]=\"time1\" class=\"date-icon\"&gt;schedule&lt;/mat-icon&gt;\n          &lt;owl-date-time #time1&gt;&lt;/owl-date-time&gt;\n&lt;/mat-form-field&gt;\n</code></pre> ts.file<pre><code>  onChange(event: any, type) {\n    // console.log(\"change event\",event)\n    if (type == \"P\") {\n      let sDate = this.amendmentForm.get('requestedDate').value;\n      // console.log(\"dropdown select\", event, sDate)\n    }\n    else {\n      let sDate = this.amendmentForm.get('requestedDate').value;\n      // console.log(\"dropdown select\", event, sDate)\n      //   console.log(\"dropdown select\", event, sDate)\n    }                   \n  }\n</code></pre></p>"},{"location":"angular/clickEvent/#realtime-ex3","title":"RealTime Ex:3","text":"<p>html.file<pre><code>&lt;ng-container&gt;\n   &lt;div class=\"icu-element-focus-control\"&gt;\n     &lt;div *ngIf=\"vital?.element?.controlData?.length&gt;0\"&gt;\n      &lt;select *ngIf=\"vital?.element?.controlData[0]?.heartRhythm?.length&gt;0\"\n        placeholder=\"Rhythm \" class=\"icu-element-focus\" [(ngModel)]=\"vital[header.value].rhytham\"\n          (ngModelChange)=\"onChange1(header?.value,icuIndex,index,item.componentName,item)\"&gt;\n         &lt;option *ngFor=\"let item1 of vital?.element?.controlData[0]?.heartRhythm;trackBy: trackByFn\"\n            [value]=\"item1.heartRhythmID\"&gt;\n              &lt;!-- &lt;input type=\"checkbox\"&gt; --&gt;\n         &lt;/option&gt;\n       &lt;/select&gt;\n      &lt;/div&gt;\n   &lt;/div&gt;\n&lt;/ng-container&gt;\n</code></pre> ts.file<pre><code> onChange12(vitalUnitId,icuIndex,index,item,vitalSignDate,data){\n    if(item.value&amp;&amp;item.unitId){\n   let convertedValue=null;}     \n }\n</code></pre></p>"},{"location":"angular/clickEvent/#02mat-autocomplete","title":"02:mat-autoComplete","text":"html.file<pre><code>&lt;mat-autoComplete (optionSelected)=\"selectedData($event)\"&gt;\n   &lt;mat-option *ngFor=\"let item of data\" &gt;\n\n   --- ts.file---\n  selectedData(event:MatAutoCompleteSelectedEvent){\n     ---\n     ---\n  } \n</code></pre>"},{"location":"angular/clickEvent/#realtime-ex-mat-autocomplete-optionselectedonchangesourceevent","title":"RealTime Ex: mat-autoComplete (optionSelected)=\"onchangeSource($event)\"","text":"<p>html.file<pre><code>  &lt;mat-form-field appearance=\"outline\" *ngIf=\"amendmentForm.get('requestType').value != 4\"&gt;\n     &lt;mat-label&gt;Requested By&lt;/mat-label&gt;\n      &lt;input aria-label=\"requestedBy\" type=\"text\" placeholder=\"Requested By\" \n       (input)=\"getResquestBy()\" matInput formControlName=\"requestedBy\" \n       [matAutocomplete]=\"auto\"&gt; \n   &lt;mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\" \n          (optionSelected)=\"onchangeSource($event)\"&gt;  //this is changeEvent \n      &lt;mat-option *ngFor=\"let option of options\" [value]=\"option\"&gt;\n                {{option.userName}}\n       &lt;/mat-option&gt;\n    &lt;/mat-autocomplete&gt;\n &lt;/mat-form-field&gt;                          \n</code></pre> ts.file<pre><code> // here import matAutoComplete,formFileldModule,InputModule\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common'; \n\n  onchangeSource(event) {   //this is ur method\n    // debugger\n    this.userName = event.option.value.userName;\n    // console.log(\"########\",this.userName);\n    if (event?.option.value.userName == this.userName) {\n      this.amendmentForm.patchValue({\n        userType: event.option.value.roleName,\n      })\n    }\n  }\n</code></pre>   ### EX:2 html<pre><code>Note: here [displayWith]=\"anyName\" it is used, what to dispaly in the view\n                         loop motam lo yem dispaly avvali anedi e [ dispalyWith] lo istam \n &lt;mat-autocomplete #auto=\"matAutocomplete\" autoActiveFirstOption \n    (optionSelected)=\"onDrugSelected($event.option.value)\" [displayWith]=\"displayDrugName\"&gt;\n  &lt;mat-option class=\"custom_line_height_generic\" *ngFor=\"let drug of drugSuggestions\" [value]=\"drug\"&gt;\n    &lt;div class=\"drug-info-block\"&gt;\n      &lt;div&gt;&lt;span class=\"label-sky\"&gt;Generic Name :&lt;/span&gt; {{ drug.drug }}&lt;/div&gt;\n       &lt;div style=\"display: flex; flex-wrap: wrap; gap: 16px;\"&gt;\n        &lt;div&gt;&lt;span class=\"label-red\"&gt;Brand Name:&lt;/span&gt; {{ drug.brandname }}&lt;/div&gt;\n        &lt;div&gt;&lt;span class=\"label-sky\"&gt;RxNorm:&lt;/span&gt; {{ drug.rxNormCode || 'NONE' }}&lt;/div&gt;\n        &lt;div&gt;&lt;span class=\"label-red\"&gt;NDC :&lt;/span&gt; {{ drug.ndc || 'NONE' }}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n   &lt;hr&gt;\n  &lt;/mat-option&gt;\n &lt;/mat-autocomplete&gt;\n</code></pre> ts.file<pre><code> displayDrugName(drug: any): string {  //this is ur displayWith here we are dispalying drugname\n    return drug?.drugname ?? drug ?? ''; \n }//retung drug ane loop lo vuna drugname ni dispaly chesunam okavela drugname lekunte then ?? \n      ante motam drugObj ne dispaly chestam okavela drugObj null or undefined vunte then '' \n    empty string ni dispaly chestunam\n    ----     ---  \n   drugSuggestions : any[] = [];\n\n  onDrugNameInput(event: Event): void {\n    const inputValue = (event.target as HTMLInputElement).value;\n\n    if (inputValue?.length &gt; 2) {\n      this.historyService.getWsDrugSuggestions(inputValue, 'DRUG', 'F').pipe(takeUntil(this.onDestroy$))\n        .subscribe({\n          next: (res: any) =&gt; {\n            this.drugSuggestions  = res?.body || [];\n          },\n          error: (err) =&gt; {\n            console.error('Drug name search error:', err);\n            this.drugSuggestions  = [];\n          },\n        });\n      }else {\n      this.drugSuggestions  = [];\n    }\n\n    if(!this.pharmacyForm.get('drugName').value){\n      this.SearchDrugId='0'\n    }\n  }\n  onDrugSelected(event){\n    let Data = event \n    this.SearchDrugId= Data?.drugid\n   if(Data.drug){\n    this.pharmacyService.getDuplicateCheck('Generic',Data?.drug ?? Data,(this.drugLibraryId ?? 0))\n    .pipe(takeUntil(this.onDestroy$)).subscribe({\n      next:(res)=&gt;{\n    if (res &amp;&amp; res?.body?.value===\"Already Exists\" ){\n        Swal.fire({\n          title: 'Medication Already Present',\n          text: 'This medication is already in the list.',\n          icon: 'info',\n          confirmButtonText: 'OK'\n        });\n        this.pharmacyForm.reset()\n        this.drugSuggestions  = [];\n       }\n       else {\n        // this.pharmacyForm?.reset()\n         this.pharmacyForm?.patchValue({\n           barndName: Data?.brandname,\n           deaClassCode: this.deaClassCodeUnits?.\n           find(ele =&gt; ele.meD_REF_DEA_CD === numberAttribute(Data?.deaclasscode)) ?? null,\n           dosageForm: Data?.dosageform ? numberAttribute(Data?.dosageform) : null,\n           rxNormCode: Data?.rxNormCode,\n           routeName: this.routes?.find(ele =&gt; ele.meD_ROUTE_ID == Data?.route) ?? null,\n           ndc: Data?.ndc,\n           theraputicCategory: Data?.theraputiccategory,\n           drugName:Data?.drug,\n           medStrength:Data?.meD_STRENGTH ?? null,\n           medUnit:Data?.meD_UNIT ?? null,\n           PackageDes:Data?.pd ?? null,\n           PackageUnit:Data?.hcfA_UNIT ?? null,\n           PackageSize:Data?.ps ?? null,\n          })\n        }\n         this.selectedOptions = [];\n      },\n     error:(err)=&gt;{\n        this.SearchDrugId='0'\n      }\n    })\n  }\n\n  }\n</code></pre>  ## Ex:3 html<pre><code>&lt;div class=\"col-12 col-xl-4 col-lg-4 col-md-4 col-sm-6\"&gt;\n  &lt;mat-form-field class=\"example-full-width\" appearance=\"outline\"&gt;\n     &lt;mat-label&gt;Medicine Name&lt;/mat-label&gt;\n     &lt;input aria-label=\"input\" type=\"text\" placeholder=\"Medications\" aria-label=\"Number\" \n          matInput required (blur)=\"onBlur()\" formControlName=\"drug\" [matAutocomplete]=\"auto\" &gt;\n              &lt;mat-autocomplete   [displayWith]=\"displayFn\" #auto=\"matAutocomplete\"\n                (optionSelected)=\"medicationSelectedEvent($event)\" &gt;\n                &lt;mat-option  *ngFor=\"let item of problems\" [value]=\"item\" [title]=\"item.drug\"&gt;\n                  {{item | tallManLettering}} ||\n                  {{item?.theraputiccategory}} || {{item?.meD_STRENGTH}} \n                  ({{item?.dataprovider}})\n                &lt;/mat-option&gt;\n              &lt;/mat-autocomplete&gt;\n              &lt;mat-error *ngIf=\" !getdrug().valid &amp;&amp;  (getdrug().dirty || getdrug().touched ||\n                isSubmit) \" id=\"validation-dob-error\"\n                 class=\"error jquery-validation-error small invalid-feedback\"&gt;\n                 Medications are required\n              &lt;/mat-error&gt;\n  &lt;/mat-form-field&gt;\n  &lt;span style=\"color: red\" *ngIf=\"medicationStatusData?.status===true\"&gt;\n     {{medicationStatusData?.message}}\n  &lt;/span&gt;\n</code></pre> ts.file<pre><code>  displayFn(obj) {  //this is ur displaywith name\n    return obj?.drug ? obj?.drug : obj;\n  }\n---in problems res.body we have data---\n  problems: Drug[];\n  getProblemSuggestions(value) {\n    this.problems = [];\n    if (value?.length &gt; 2) {\n      // console.log(this.presentMedicationForm.value?.drug)\n      // this.historyService.getMedicationsSuggestions(value).pipe(debounceTime(400),takeUntil(this.onDestroy$))\n      .subscribe(res =&gt; {\n        this.historyService.getWsDrugSuggestions(value, 'RxNorm','')\n        .pipe(debounceTime(400),takeUntil(this.onDestroy$)).subscribe(res =&gt; {   \n        this.problems = res.body;\n      })\n    })\n    }\n  }\n\n  ------ ----------\n  medicationSelectedEvent(event) {\n  // console.log(event);\n    this.presentMedicationForm.patchValue({\n      dosage: this.dosage[0].dosage,\n     dosageForm: (this.dosageForms.find(ele =&gt; +ele?.meD_DOSAGE_FORM_ID === +event.option.value?.dosageform)?\n        .meD_DOSAGE_FORM_DESC),\n      route: this.routes.find(ele =&gt; +ele?.meD_ROUTE_ID === +event.option.value?.route),\n      source: this.medicationSourcess[0].medicationSourceName,\n      dosageUnits:event.option.value.dosing_unit,\n      rxNormCode:event.option?.value?.rxNormCode,\n      dosageQ:event.option?.value?.meD_STRENGTH,\n      medUnit:(this.drugMedUnits.find(ele =&gt; +ele?.medUnit === +event.option.value?.meD_UNIT))\n       ??event.option.value?.meD_UNIT,\n    });\n    this.medicationsStatus(event?.option?.value?.drugid);\n     let routeValue = ((this.presentMedicationForm.get('route')?.value)?.meD_ROUTE_ABBR).trim();\n    // console.log(routeValue);\n\n    if(((this.presentMedicationForm.get('route')?.value)?.meD_ROUTE_ABBR).trim() === \"IV\"){\n     this.presentMedicationForm.patchValue({\n      frequency:this.frequency[0].freq\n     })\n    }else{\n      this.presentMedicationForm.patchValue({\n        frequency:this.frequency[1].freq\n       })\n    }\n    this.triggerValidations();\n  }\n</code></pre></p>"},{"location":"angular/clickEvent/#03-mat-select-selectionchangedemo","title":"03: mat-select (selectionChange)=\"demo()\"","text":"html.file<pre><code>&lt;mat-select [ngModel]=\" \" (selectChange)=\"onSelectionChange($event)\"&gt;\n\n   ---ts.file--\n   onSelectionChange(event){\n    ---\n    ---\n   }\n</code></pre>"},{"location":"angular/clickEvent/#realtime-ex-mat-select-selectionchangeonmergechangeevent","title":"RealTime ex: mat-select (selectionChange)=\"onMergeChange($event)\"","text":"<pre><code> &lt;mat-form-field class=\"example-full-width\" appearance=\"outline\"&gt;\n    &lt;mat-label&gt;Merge Type&lt;/mat-label&gt;\n     &lt;mat-select [(ngModel)]=\"mergeTypeIndex\" name=\"mergeType\"\n          [disableOptionCentering]=\"true\" (selectionChange)=\"onMergeChange($event)\" &gt;\n        &lt;mat-option *ngFor=\"let list of mergeType\" [value]=\"list.id\"&gt;\n           {{list.field}}\n        &lt;/mat-option&gt;\n     &lt;/mat-select&gt;\n &lt;/mat-form-field&gt; \n</code></pre>"},{"location":"angular/clickEvent/#4-ng-select-changedemo","title":"4: ng-Select (change)=\"demo()\"","text":"ts.file<pre><code> &lt;ng-select bindValue=\"\" (change)=\"demo()\"&gt;\n        (Or)\n &lt;raido-button (change)=\"radioChange()\"&gt;\n\n  ---ts.file--\n demo(){\n    ---\n }          \n</code></pre>"},{"location":"angular/clickEvent/#realtime-ex-mat-form-field-changeonchangename","title":"RealTime Ex: mat-form-field (change)=\"onChangeName()\"","text":"html.file<pre><code>  &lt;div class=\"mat-form-field-block\"&gt;\n    &lt;ng-select  dropdownPosition=\"top\"  class=\"ng-select-custom\" \n     [items]=\"sourcerecords\" bindLabel=\"sourceName\" bindValue=\"sourceId\" \n     formControlName=\"requestType\" placeholder=\"Source\"  appearance=\"outline\" \n     (change)=\"onSelectionChange($event);onSelectionChangeData($event)\" aria-label=\"source\"\n      [inputAttrs]=\"{ 'placeholder':'','autocomplete': 'off','aria-label':'Request Type',autocorrect':'off' }\"&gt;\n    &lt;/ng-select&gt;\n  &lt;/div&gt;\n        ---for radioButton--\n    &lt;mat-radio-group aria-label=\"Select an option\" (change)=\"onChangeName()\" \n       [(ngModel)]=\"name\" [ngModelOptions]=\"{standalone: true}\"&gt;\n      &lt;mat-radio-button value=\"Retail\"&gt;Retail&lt;/mat-radio-button&gt;\n        &lt;mat-radio-button value=\"Other\"&gt;Other&lt;/mat-radio-button&gt;\n    &lt;/mat-radio-group&gt;\n</code></pre>"},{"location":"angular/clickEvent/#5-date-change-datechangeonfromdatetodatechangeevent","title":"5 : date change (dateChange)=\"onFromDateToDateChange($event)","text":"<p>html.file<pre><code> &lt;mat-form-field appearance=\"outline\" class=\"example-full-width\"&gt;\n    &lt;mat-label&gt;From Date&lt;/mat-label&gt;\n     &lt;input matInput [matDatepicker]=\"fromDatePicker\" placeholder=\"MM/DD/YYYY\" [(ngModel)]=\"fromDate\"    \n        appMaskDate (dateChange)=\"onFromDateToDateChange($event)\"\n         [max]=\"toDate\" /&gt;\n        &lt;!-- (keyup)=\"formatDate($event)\" --&gt;\n       &lt;mat-datepicker-toggle matSuffix [for]=\"fromDatePicker\"&gt;&lt;/mat-datepicker-toggle&gt;\n         &lt;mat-datepicker #fromDatePicker&gt;&lt;/mat-datepicker&gt;\n  &lt;/mat-form-field&gt;\n</code></pre> ts.file<pre><code>    onFromDateToDateChange(event: MatDatepickerInputEvent&lt;Date, unknown&gt;): void {\n    this.getInOrOutPatient();\n  }\n</code></pre></p>"},{"location":"angular/github/","title":"GitHub","text":"<pre><code>git pull origin Dev_NG_18_Feature  --- this is for falcon-patient\ngit pull origin Dev-18  --this is for patient_portal\n\n  set NODE_OPTIONS=--max_old_space_size=8192\n ---- git commands ---\n 1.write msg in msg box \n 2.click on + symbol and dont click on commit just type cmd as \n 3. git stash save \"rajesh\"\n 4. after that take git pull origin Dev_NG_18_Feature\n 5.git stash apply stash@{0}--- here the data will come which will be selected \n-&gt; git stash list ---- here the save list will come \n-&gt; git pull origin Dev_NG_18_Feature (or) if ur in patient_portal then: git pull orign Dev-18\n-&gt; git stash drop stash@{0} -- to delete the perticular index data \n-&gt; git stash clear -- to clear complete saved stash   \n</code></pre>"},{"location":"angular/input/","title":"@Input decorator is used to send data fom PARENT-CHILD","text":""},{"location":"angular/input/#step1-import-childcomp-in-ur-parentcomp","title":"STEP:1 import childComp in ur parentComp","text":"<p>parent.ts.file<pre><code>import {childComponent} from './directory';//import ur childComponent\n\n  data1:string=\"mango\" // varible:type=\"yourData\"\n  data2:string=\"sweet\" \n</code></pre>   STEP:2 Your sending data from P-C so in [ parentComponent.html ] file use ur childComponent selector parent.html<pre><code>  &lt;app-child [d1]=\"data1\"\n             [d2]=\"data2\"\n   &gt;&lt;/app-child&gt;\n</code></pre></p>"},{"location":"angular/input/#step3-now-go-to-your-childcomponent-and-here-your-data-is-present-in-d1-d2","title":"STEP:3 Now go to your childComponent and here your data is present in d1 &amp; d2","text":"child.ts<pre><code>import { Component, Input } from '@angular/core';\n @Input() d1:string;\n @Input() d2:string;\n</code></pre>"},{"location":"angular/input/#step4-use-this-d1-d2-in-html-file","title":"STEP:4 use this d1 &amp; d2 in HTML file","text":"child.html<pre><code>&lt;h1&gt; {{d1}} &lt;/h1&gt;\n&lt;h2&gt; {{d2}} &lt;/h2&gt;\n</code></pre>"},{"location":"angular/input/#example2","title":"Example:2","text":""},{"location":"angular/input/#input-decorator-and-ngonchangesdataany","title":"Input decorator and ngOnChanges(data:any){}","text":"parent.ts<pre><code>@input is used to send data from parent to child \n\narray=[1,2,3,4] ;\nname_type_code: NameTypeCodes[]; // this is present in the parent component \n\nformsubmitbutton(){\nthis.array=[...this.array,this.form.value]   \n  }; //// (here we are pushing the formdata to that array)\n\n  parent compnent \n    getNameTypeCode() {\n    this.masterDataService.getNameCodes().pipe(takeUntil(this.onDestroy$)).subscribe(res =&gt; {\n      this.name_type_code = res.body;\n      this.nameTypeCodeStatus = true;\n      ////console.log.log.log(\"name type code ==&gt; \", res.body);\n    })\n    },\n\n     ----parent html ---\n\n&lt;app-child \n     [array]=\"array\"\n     [name_type_code]=\"name_type_code\" \n     &gt;\n  &lt;/app-child&gt;  // (the selector of the child componenet )\n</code></pre> child.ts<pre><code>import {component,Input} from '@angular/core'\n@Input() name_type_code: NameTypeCodes[]; here the data we will get\n@Input array:any; // ( here the data comes in that arrayFormat from the parent that data we can use it in any way )\n\n    ---child html ----\n&lt;p&gt;child works!&lt;/p&gt;\n\n@for(item of array ;track item ){  // (track is used for the performance)\n     &lt;li&gt;{{item.firstname}}&lt;/li&gt;\n   }\n@empty{   // (if the data is not present )\n  &lt;li&gt;there is no data &lt;/li&gt;\n}\n\n\nwhy we need to use ngOnChanges\n\n-&gt; the data is send from parent to child intitally when the component is loaded \n    only the initial data will come \n\n-&gt; but when we need the updated data of that array when the form is submitted \n   so the updated data is triggered in that ngOnchnages\n\nngOnChanges(changes: SimpleChanges): void {\n  // Object.keys(changes).forEach(key =&gt; this[key] = changes[key].currentValue);\n\nif(changes['array']?.currentValue){\n  let obj = changes['array']?.currentValue\n  console.log(obj,'datadata')\n\n  }\n}\n</code></pre>"},{"location":"angular/matdilog/","title":"MatDialog","text":"<pre><code>import { MatDialog, MatDialogRef } from '@angular/material/dialog';                       \n\nconstructor(public dialogRef:MatDialogRef&lt;any&gt;,private dialog:MatDialog);\n\n addMedicationsFrom(medicationObj){\n    const matDialog = this.dialog.open(MedicationEntryPopupComponent,{\n      width:'80%',\n      height:'80%',\n      data: {\n        medicationRowId: 0 ,\n        actionType: 'Add',\n        medicationType: 'Current',\n        isShowMedicationTypeField: false,\n        isClosed: true,\n        medicationObj: medicationObj,\n        // isPatchCurrentStartDate: isPatchCurrentStartDate,\n      },\n      disableClose: true\n    })\n    matDialog.componentInstance.getSavedMedications.subscribe({\n      next:(res)=&gt;{\n      this.getCurrentMedicationData();\n      },error:(err)=&gt;{\n        console.log(err,'Error ')\n      }\n    })\n  }     \n</code></pre>"},{"location":"angular/output/","title":"OutPut","text":""},{"location":"angular/output/#output-is-used-to-send-data-from-child-to-parent","title":"@Output is used to send data from Child to Parent","text":"<pre><code>-&gt; child nundi data ni parent ki send ceyadanki manaki 3 ways vuani\n   1. @Output Decorator  2. Template ReferenceVariable(#) 3.@ViewChild\n-&gt;  @Output gurinchi teliyali ante inko 2 terms teliyali \n   1. EventEmitter  2. EventBinding\n</code></pre> <pre><code>Step:1 import @Output &amp; EventEmitter in ChildComponent\n         ex: {import Output,EventEmitter } from 'angular/core'\nStep:2 create constructor in your child component \n         ex: @Output variable=new EventEmitter();\nStep:3 e event emitter lo manaki emit() ane oka method vuntundi.danni e variable tho access chekovachu \n         ex: let obj=new obj(); obj.m1() (or) obj.m2()\n       same elane variable.emit() ani use chestam so e emit method lopala edite \n       manam pass chestamo ha emit aina data ni parentComp.html lo use cheskovali            \n</code></pre>"},{"location":"angular/output/#example","title":"Example","text":"child.ts<pre><code>import { Output, EventEmitter } from '@angular/core';\n  @Output() eventName = new EventEmitter&lt;any&gt;();\n\n  msg=\"pass to parent\"; //your data\n\n    passToParent(){\n       this.eventName.emit(this.msg);\n    }\n\n    ---html--- \nin html file write one clickEvent to hit above method\n\n&lt;button (click)=\"passToParent()\"&gt;Send&lt;/button&gt; \n</code></pre> <p>parent.ts<pre><code>myData:any;\n\n ---html---\n &lt;app-child\n   myData=$event\n &gt;&lt;/app-child&gt;\n &lt;h1&gt;{{myData}}&lt;/h1&gt;\n</code></pre>  ###  RealTime Ex:  AddressComp.ts<pre><code>   ---- [ChildComponent.ts] ----\nimport { Output } from '@angular/core';\n\n@Output() formAddressReady: EventEmitter&lt;UntypedFormGroup&gt; = new EventEmitter&lt;UntypedFormGroup&gt;();\n\n   ngOnInit() {\n    this.formAddressReady.emit(this.addressForm);\n    }\n\n    --- Address.component.html ---\n\n&lt;form [formGroup]=\"addressForm\"&gt;\n    &lt;input type=\"text\" formControlName=\"name\" /&gt;\n&lt;/form&gt;\n</code></pre>   ###   [Parent] add-location.ts<pre><code>import AddressComp from './addressComp.ts';\n\naddAddressFormControl(name: string, form: UntypedFormGroup): void {\n    this.locationForm.addControl(name, form);\n}\n\nadd-location.html\n&lt;app-address (formAddressReady)=\"addAddressFormControl('addressForm', $event)\"&gt;\n  &lt;/app-address&gt;\n</code></pre></p>"},{"location":"angular/output/#realtime-ex","title":"Realtime ex:","text":"<pre><code>    --PresentMedicationComponent1.ts--\n @Output() saveEvent=new EventEmitter(); // child-parent\n\n this.historyService.addPresentMedicationHistory(forms).pipe(takeUntil(this.onDestroy$)).subscribe(res =&gt; {\n        if(res.status==200)\n        {\n          this.clearStatus=true;\n         this.saveEvent.emit(true)  ; //this save we are emmiting\n        }})\n\n     ---MedicationsReconciliationComponent.ts--     \n\n addHomeMedication(event){\n\n      const dialogRef=this.dialog.open(PresentMedicationComponent1,{\n\n        width:'60%',\n        height:'45%',\n        data:{event,\n          type:'add-home-medication',\n        },\n        disableClose: true,\n      })\n      dialogRef.componentInstance.saveEvent.pipe(takeUntil(this.onDestroy$)).subscribe({ //here we are using that emited data\n        next: (res) =&gt; {\n          this.getHomeMedications();\n        }\n      });       \n }\n</code></pre>"},{"location":"angular/shortcutkeys/","title":"ShortCutKeys","text":"<pre><code>copy the same elements in multiple time we should we the key ----&gt; shift+ alt+ down arrow.\n1. ctrl+f --&gt; search the value.\n2. ctrl+h ---&gt; replace the search value.\n3.open the selected componemt  class---&gt; ctrl+tab.\n4. ctrl+j (or) ctr1+shit+~ --to open terminal\n5. Alt+upArrow or alt+downArrow = to move perticular line up/down \n6.window+up/down/righ/left = to set your tab at particular place(mana tabs like chrome,vs,    notepate etc... \nvatini minimize chesi oka place lo set cheskovachu)\n7.windows+d = to minimize all the browsers which are opened (mana system lo open \nai vuna anni tabs or applns ni okesari close cheskovahcu)\n\n8.ctrl+delete = to delete rightside word \n\n9.shift+Home = to copy right side total text \n  shift+End = to copy left side total text\n\n10.shift+up/down =to select lines \n  ctrl+/ = to comment or un-comment\n\n11.shift+up/down = to select lines\n  ctrl+] = to move selected lines right side\n  ctrl+[ = to move selected lines leftside\n12.ctrl+k+w = to close all the tabs [ex:manam vscode lo open aina anni files ex:-&gt;homeComp.ts -&gt;homecomp.html]\n13.ctrl+side arrow= to move cursor line to word by word\n14.ctrl+k+s for visual studio shortcuts\n15:ctrl+f4 or ctrl+W to close the tab\n16:ctrl+t to open new tab\n17: Ctrl+N:New Windwon\n18:ctrl+L:to go to search bar \n19: Ctrl+Shift+W:Close Window and All Tabs\n20:Ctrl+Q:Close Window:\n</code></pre>"},{"location":"angular/signal/","title":"Signal","text":"LocalDataSourceService.ts<pre><code> in this service class create your signal y to create in service file only means if u create in service then only one object will be created \n\n\nstep:1 export class LocalDataSourceService {\n        currentMedSignal=signal&lt;any&gt;(null); //creating signal\n        currentMedData(data: any) {\n            this.currentMedSignal.set(data);\n            }   \n            }\nStep:2  a component lo data manaki kavlao a comp.ts file ki velli  ex:\n     constructro(private localDataService:LocalDataSourceService){}\n        currentMedications:any;\n        getCurrentMedicationData() {\n            this.linkedMedications.getCurrentMedications(this.patientId).subscribe(res =&gt; {\n      this.currentMedications = res.body;\n      this.localdataService.currentMedData(this.currentMedications);//so here manki res.body lo vachina data ni signal lo petam \n      }\n      }\nStep:3   in which componet you want in that ts file inside constuctor u have to write\n        constructro(private localDataService:LocalDataSourceService){\n            effect(() =&gt; {\n            let transmitData=this.localdataService.currentMedSignal()\n                console.log(transmitData,'data using signal'); //here u will get data that ur can use were u want in this compont\n       }) \n  }   \n</code></pre>"},{"location":"angular/swal/","title":"SwalFire","text":"<pre><code>---swal .fire--\nimport Swal from 'sweetalert2';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nconstructor(private snackbar:MatSnackBar);\n\n discontinueClick(item: any) {\n    this.medStatus='D';\n    Swal.fire({\n      title: 'Are you sure want to Discontinue?',\n      icon: 'warning',\n      allowOutsideClick:false,\n      showCancelButton: true,\n      confirmButtonText: 'Yes, Discontinue it!',\n      cancelButtonText: 'No, keep it'\n    }).then((result) =&gt; {\n      if (result.value) {\n        this.erdashboard.createpresentMedicationStatus(item?.medicationRowId ,\n        this.patientId,this.visitId,this.medStatus, item?.eventId).pipe(takeUntil(this.onDestroy$)).subscribe({\n          next:(res)=&gt;{\n           this.getHomeMedications(); //your get method\n          },error:(err)=&gt;{\n            console.log(err,'Error ')\n          }\n        })\n          this.status = true;\n\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        this.snackbar.open('Your record safe !','Ok',{  //snack-bar\n          duration:2000\n        })\n\n      }\n    })\n\n  }\n</code></pre>"},{"location":"angular/viewchild/","title":"ViewChild","text":"<pre><code>@ViewChild  \n\u2192 child \u0c28\u0c41\u0c02\u0c21\u0c3f parent \u0c15\u0c3f data transfer \u0c1a\u0c47\u0c2f\u0c3e\u0c32\u0c02\u0c1f\u0c47 3 ways \u0c09\u0c28\u0c4d\u0c28\u0c3e\u0c2f\u0c3f  \n     1: @Output  2: viewchild() &amp; 3: TempRefVariable\n\n\u2192 step 1: @ViewChild of Reference code \u0c28\u0c3f \u0c2e\u0c28\u0c02 Angular/core \u0c28\u0c41\u0c02\u0c21\u0c3f import \u0c1a\u0c47\u0c2f\u0c3e\u0c32\u0c3f  \n    ex: import { ViewChild } from '@angular/core'\n\n\u2192 \u0c07\u0c26\u0c3f \u0c2e\u0c28\u0c02 parent component.ts file lo importt \u0c1a\u0c47\u0c2f\u0c3e\u0c32\u0c4d\u0c38\u0c3f vuntundi  bz manam [ C-P ] data send chestundan\n    so.Parent component lo child data use cheskovali ankuntunam \n    so import in parent comp\n\n\u2192 a component ni use cheskovali ankuntunamo danni import cheyali   \n    ex: import { HomeComp } from './comp/home.component';\n\n\u2192 \u00a7II: in general \u0c2e\u0c28\u0c02 oka value \u0c28\u0c3f variable \u0c32\u0c4b  yela store \u0c1a\u0c47\u0c38\u0c4d\u0c24\u0c3e\u0c02  \n    int x=10; x is a variable that we can use anywhere  \n    @ViewChild(HomeComp) variable: string; //so e variable ni use chesi manam childComp lo vunna anni varibles/methods ni access cheskovachu\n\n\u2192 Note: a component lo aite manam &lt;app-comp&gt; ani istamo adi ChildCompoent  \n\n   ex: &lt;app-child&gt;&lt;/app-child&gt; \u2192 child\n\n----- head.ts file ---  [C-P] @ViewChild\n    //this is child component.ts\n\n  data = 'Hello';\n    passToParent() {\n       return this.data;\n         }\n----app.comp.ts -- ParentComponent\n\u2192 app.comp.ts \u2192 parent\n\n    import { ViewChild } from '@angular/core'\n    import { HeaderComp } from './header.component'\n\n    @ViewChild(HeaderComp) header: any;\n\n    test() {\n        console.log(this.header.passToParent);\n     }\n\n\u2192 app.html [parentHtml]\n    &lt;app-header&gt;&lt;/app-header&gt;   \u00a0\u2190\u00a0child\u00a0comp\n    &lt;button (click)=\"test()\"&gt;Send&lt;/button&gt;\n</code></pre>"},{"location":"files/file/","title":"\ud83d\udcc1 Viewable PDF Files","text":""},{"location":"files/file/#angular-17-notes-by-cssworld-rsk-helpline","title":"\ud83d\udcc4 Angular 17 Notes by CssWorld &amp; Rsk Helpline","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#ag-grid","title":"\ud83d\udcc4 Ag-Grid","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#angular-material-by-rsk-helpline","title":"\ud83d\udcc4 Angular Material by RSK Helpline","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#errors","title":"\ud83d\udcc4 Errors","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#ilander-css","title":"\ud83d\udcc4 Ilander CSS","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#tasks-kpmd","title":"\ud83d\udcc4 Tasks (KPMD)","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#shortcut-keys","title":"\ud83d\udcc4 Shortcut Keys","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#mvc-notes","title":"\ud83d\udcc4 MVC Notes","text":"<p>\ud83d\udc41\ufe0f View</p>"},{"location":"files/file/#github-details","title":"\ud83d\udcc4 GitHub Details","text":"<p>\ud83d\udc41\ufe0f View</p>"}]}